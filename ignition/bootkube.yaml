networkd:
  units:
    - name: 00-lo.network
      contents: |
        [Match]
        Name=lo

        [Link]
        Unmanaged=true
    - name: 00-static.network
      contents: |
        [Match]
        MACAddress={{.mac}}

        [Network]
        Address=10.10.{{.request.query.subnet}}.{{.node_number}}/16
        Gateway=10.10.10.33
        DNS=10.10.100.1
        Domains=zbrbdl zbrbdl.com
        IPForward=true
        DHCP=no
    - name: 00-unmanaged.network
      contents: |
        [Match]
        Name=dummy0 kube-dummy-if kube-bridge cni*

        [Link]
        Unmanaged=true
systemd:
  units:
    - name: sshd.socket
      enable: true
      dropins:
        - name: 50-bind-address.conf
          contents: |
            [Socket]
            ListenStream=
            FreeBind=
            ListenStream=10.10.{{.request.query.subnet}}.{{.node_number}}:22
            FreeBind=yes
    - name: locksmithd.service
      dropins:
        - name: 40-etcd-lock.conf
          contents: |
            [Service]
            Environment=REBOOT_STRATEGY=off
    - name: kubelet.path
      enable: true
      contents: |
        [Unit]
        Description=Watch for kubeconfig
        [Path]
        PathExists=/etc/kubernetes/kubeconfig
        [Install]
        WantedBy=multi-user.target
    - name: kubelet.service
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube ACI
        RequiresMountsFor=/var/lib/rook
        [Service]
        Environment="RKT_RUN_ARGS=--uuid-file-save=/var/run/kubelet-pod.uuid \
          --volume=resolv,kind=host,source=/etc/resolv.conf \
          --mount volume=resolv,target=/etc/resolv.conf \
          --volume var-lib-cni,kind=host,source=/var/lib/cni \
          --mount volume=var-lib-cni,target=/var/lib/cni \
          --volume modprobe,kind=host,source=/usr/sbin/modprobe \
          --mount volume=modprobe,target=/usr/sbin/modprobe \
          --volume lib-modules,kind=host,source=/lib/modules \
          --mount volume=lib-modules,target=/lib/modules \
          --insecure-options=image \
          --volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log"
        EnvironmentFile=/etc/kubelet.env
        Environment=PATH=/opt/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/cni/net.d
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/checkpoint-secrets
        ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/inactive-manifests
        ExecStartPre=/usr/bin/mkdir -p /var/lib/cni
        ExecStartPre=/usr/bin/bash -c "grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d > /etc/kubernetes/ca.crt"
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          {{ if .kube_master -}}
          --node-labels=node-role.kubernetes.io/master \
          {{end -}}
          --kubeconfig=/etc/kubernetes/kubeconfig \
          --require-kubeconfig \
          --client-ca-file=/etc/kubernetes/ca.crt \
          --anonymous-auth=false \
          --cni-conf-dir=/etc/kubernetes/cni/net.d \
          --network-plugin=cni \
          --lock-file=/var/run/lock/kubelet.lock \
          --exit-on-lock-contention \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --allow-privileged=true \
          --cluster_dns=10.3.0.10 \
          --cluster_domain=cluster.local
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
        ExecStopPost=-/usr/bin/rkt gc --grace-period=0
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
    - name: bootkube.service
      contents: |
        [Unit]
        Description=Bootstrap a Kubernetes control plane with a temp api-server
        [Service]
        Type=simple
        WorkingDirectory=/opt/bootkube
        ExecStart=/opt/bootkube/bootkube-start
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/bootkube-pod.uuid
        ExecStopPost=-/usr/bin/rkt gc --grace-period=0
    - name: rkt-image-loader.service
      {{- if .low_mem }}
      enable: false
      {{- else }}
      enable: true
      {{- end }}
      contents: |
        [Unit]
        Description=rkt image loader
        RequiresMountsFor=/srv/images
        Before=kubelet.service

        [Service]
        Environment=IMAGEDIR=/srv/images
        Type=oneshot
        ExecStart=/bin/sh -c "/bin/rkt --insecure-options=image fetch ${IMAGEDIR}/*.aci"

        [Install]
        WantedBy=multi-user.target
    - name: docker-image-loader.service
      {{- if .low_mem }}
      enable: false
      {{- else }}
      enable: true
      {{- end }}
      contents: |
        [Unit]
        Description=docker image loader
        RequiresMountsFor=/srv/images
        After=docker.service

        [Service]
        Environment=IMAGE_DIR=/srv/images
        Type=oneshot
        ExecStart=/opt/bin/docker-image-loader

        [Install]
        WantedBy=multi-user.target
    - name: docker-image-saver.service
      {{- if .low_mem }}
      enable: false
      {{- else }}
      enable: true
      {{- end }}
      contents: |
        [Unit]
        Description=docker image saver
        RequiresMountsFor=/srv/images
        After=docker.service

        [Service]
        Environment=IMAGE_DIR=/srv/images
        Type=oneshot
        ExecStart=/opt/bin/docker-image-saver
    - name: docker-image-saver.timer
      {{- if .low_mem }}
      enable: false
      {{- else }}
      enable: true
      {{- end }}
      contents: |
        [Unit]
        RequiresMountsFor=/srv/images
        After=docker.service

        [Timer]
        OnUnitInactiveSec=4h
        OnActiveSec=30min

        [Install]
        WantedBy=docker.service
        WantedBy=timers.target
    - name: rpc-statd.service
      enable: true
    - name: srv-images.mount
      enable: true
      contents: |
        [Unit]
        Requires=systemd-resolved.service
        After=systemd-resolved.service

        [Mount]
        What=nfs.zbrbdl:/images
        Where=/srv/images
        Type=nfs
        Options=rw,intr,hard,async,nolock,tcp,noatime
    - name: losetup.service
      {{- if .low_mem }}
      enable: true
      {{- else }}
      enable: false
      {{- end }}
      contents: |
        [Unit]
        Description=Loopback device setup
        RequiresMountsFor=/srv/images

        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/usr/sbin/losetup --find \
          /srv/images/node{{.node_number}}{{.request.query.suffix}}.img
        ExecStop=/usr/sbin/losetup --detach-all
        ExecStopPost=/usr/sbin/losetup --detach-all
    - name: var-lib-docker.mount
      {{- if .low_mem }}
      enable: true
      {{- else }}
      enable: false
      {{- end }}
      contents: |
        [Unit]
        BindsTo=losetup.service
        After=losetup.service
        Before=docker.service

        [Mount]
        What=/dev/disk/by-label/BASE
        Where=/var/lib/docker
        Type=btrfs
        Options=compress=lzo,subvol=/DOCKER

        [Install]
        RequiredBy=docker.service
    - name: var-lib-rkt.mount
      {{- if .low_mem }}
      enable: true
      {{- else }}
      enable: false
      {{- end }}
      contents: |
        [Unit]
        BindsTo=losetup.service
        After=losetup.service
        Before=rkt-gc.service

        [Mount]
        What=/dev/disk/by-label/BASE
        Where=/var/lib/rkt
        Type=btrfs
        Options=compress=lzo,subvol=/RKT

        [Install]
        RequiredBy=rkt-gc.service
        RequiredBy=kubelet.service
    - name: etc-kubernetes.mount
      enable: true
      contents: |
        [Unit]
        Requires=systemd-resolved.service
        After=systemd-resolved.service
        Before=kubelet.service

        [Mount]
        What=nfs.zbrbdl:/kubernetes/kubernetes-node{{.node_number}}{{.request.query.suffix}}
        Where=/etc/kubernetes
        Type=nfs
        Options=rw,intr,hard,async,nolock,tcp,noatime

        [Install]
        WantedBy=multi-user.target
        RequiredBy=kubelet.service
    - name: var-lib-rook.mount
      enable: true
      contents: |
        [Unit]
        Requires=systemd-resolved.service
        After=systemd-resolved.service

        [Mount]
        What=nfs.zbrbdl:/rook/rook-node{{.node_number}}{{.request.query.suffix}}
        Where=/var/lib/rook
        Type=nfs
        Options=rw,intr,hard,async,nolock,tcp,noatime

        [Install]
        WantedBy=multi-user.target
    - name: var-etcd.mount
      enable: false
      contents: |
        [Unit]
        Requires=systemd-resolved.service
        After=systemd-resolved.service

        [Mount]
        What=nfs.zbrbdl:/etcd/etcd-node{{.node_number}}{{.request.query.suffix}}
        Where=/var/etcd
        Type=nfs
        Options=rw,intr,hard,async,nolock,tcp,noatime

        [Install]
        WantedBy=multi-user.target
storage:
  files:
    - path: /etc/local.d/nfs.stop
      filesystem: root
      mode: 0755
      contents:
        inline:
          /bin/umount -a -f -t nfs,nfs4
    - path: /etc/modules-load.d/conntrack.conf
      filesystem: root
      mode: 0644
      contents:
        inline: |
          ip_vs
    - path: /etc/hostname
      filesystem: root
      mode: 0644
      contents:
        inline: |
          node{{.node_number}}{{.request.query.suffix}}.zbrbdl
    - path: /etc/hosts
      filesystem: root
      mode: 0644
      contents:
        inline: |
          # IPv4 and IPv6 localhost aliases
          127.0.0.1       localhost
          ::1             localhost

          # Servers
          10.10.{{.request.query.subnet}}.1       node1{{.request.query.suffix}} node1{{.request.query.suffix}}.zbrbdl
          10.10.{{.request.query.subnet}}.2       node2{{.request.query.suffix}} node2{{.request.query.suffix}}.zbrbdl
          10.10.{{.request.query.subnet}}.3       node3{{.request.query.suffix}} node3{{.request.query.suffix}}.zbrbdl
          10.10.{{.request.query.subnet}}.4       node4{{.request.query.suffix}} node4{{.request.query.suffix}}.zbrbdl
          10.10.{{.request.query.subnet}}.5       node5{{.request.query.suffix}} node5{{.request.query.suffix}}.zbrbdl
    - path: /etc/systemd/timesyncd.conf
      filesystem: root
      mode: 420
      contents:
        inline: |
          [Time]
          NTP=0.coreos.pool.ntp.org 1.coreos.pool.ntp.org 2.coreos.pool.ntp.org 3.coreos.pool.ntp.org
    - path: /etc/sysctl.d/max-user-watches.conf
      filesystem: root
      contents:
        inline: |
          fs.inotify.max_user_watches=16184
    - path: /etc/sysctl.d/ceph-optimization.conf
      filesystem: root
      contents:
        inline: |
          kernel.pid_max=4194303
          net.core.rmem_max = 16777216
          net.core.wmem_max = 16777216
          net.core.rmem_default = 16777216
          net.core.wmem_default = 16777216
          net.core.optmem_max = 40960
          net.ipv4.tcp_rmem = 4096 87380 16777216
          net.ipv4.tcp_wmem = 4096 65536 16777216
          net.core.somaxconn = 1024
          net.core.netdev_max_backlog = 50000
          net.ipv4.tcp_max_syn_backlog = 30000
          net.ipv4.tcp_max_tw_buckets = 2000000
          net.ipv4.tcp_tw_reuse = 1
          net.ipv4.tcp_tw_recycle = 1
          net.ipv4.tcp_fin_timeout = 10
          net.ipv4.tcp_slow_start_after_idle = 0
          net.ipv4.udp_rmem_min = 8192
          net.ipv4.udp_wmem_min = 8192
          net.ipv4.conf.all.send_redirects = 0
          net.ipv4.conf.all.accept_redirects = 0
          net.ipv4.conf.all.accept_source_route = 0
          net.ipv4.tcp_timestamps = 0
          net.ipv4.tcp_sack = 1
          net.ipv4.tcp_low_latency = 1
          net.ipv4.tcp_adv_win_scale = 1
          net.netfilter.nf_conntrack_max = 1000000
    - path: /etc/sysctl.d/kube-router.conf
      filesystem: root
      contents:
        inline: |
          net.ipv4.vs.conntrack = 1
    - path: /etc/kubelet.env
      filesystem: root
      mode: 0644
      contents:
        inline: |
          # KUBELET_IMAGE_URL=quay.io/coreos/hyperkube
          # KUBELET_IMAGE_TAG=v1.5.5_coreos.0
          KUBELET_IMAGE_URL=quay.io/bzub/hyperkube
          KUBELET_IMAGE_TAG=v1.6.5_bzub.0
    - path: /opt/bootkube/bootkube-start
      filesystem: root
      mode: 0544
      user:
        id: 500
      group:
        id: 500
      contents:
        inline: |
          #!/bin/bash
          # Wrapper for bootkube start
          set -e
          # BOOTKUBE_ACI=${BOOTKUBE_ACI:-quay.io/coreos/bootkube}
          # BOOTKUBE_VERSION=${BOOTKUBE_VERSION:-v0.4.4}
          BOOTKUBE_ACI=${BOOTKUBE_ACI:-quay.io/coreos/bootkube-git}
          BOOTKUBE_VERSION=${BOOTKUBE_VERSION:-master}
          BOOTKUBE_ASSETS=${BOOTKUBE_ASSETS:-/home/core/assets}
          RKT_RUN_ARGS=--uuid-file-save=/var/run/bootkube-pod.uuid
          exec /usr/bin/rkt run \
            --trust-keys-from-https \
            --volume assets,kind=host,source=$BOOTKUBE_ASSETS \
            --mount volume=assets,target=/assets \
            --volume bootstrap,kind=host,source=/etc/kubernetes \
            --mount volume=bootstrap,target=/etc/kubernetes \
            $RKT_OPTS \
            ${BOOTKUBE_ACI}:${BOOTKUBE_VERSION} \
            --net=host \
            --dns=host \
            $RKT_RUN_ARGS \
            --exec=/bootkube -- start --asset-dir=/assets "$@"
    - path: /etc/systemd/logind.conf
      filesystem: root
      mode: 0600
      contents:
        inline: |
          HandleLidSwitch=ignore
    - path: /opt/bin/docker-image-loader
      filesystem: root
      mode: 0544
      contents:
        inline: |
          #!/bin/sh
          set -e

          for i in ${IMAGE_DIR}/*.docker
          do
            docker image load -i ${i}
          done
    - path: /opt/bin/docker-image-saver
      filesystem: root
      mode: 0544
      contents:
        inline: |
          #!/bin/sh
          set -e

          docker image prune -f

          for i in $(docker images --format {{`"{{.Repository}}:{{.Tag}}"`}})
          do
            FILE=$(echo ${i}.docker|sed -e 's/\//__/g')
            if [ ! -f ${IMAGE_DIR}/${FILE} ]
            then
              echo "Saving image ${i} to ${IMAGE_DIR}/${FILE}" && \
              docker image save "${i}" -o "${IMAGE_DIR}/${FILE}" && \
              echo "Done."
            else
              echo Image ${i} already saved.
            fi
          done
ignition:
  config:
    append:
      - source: http://matchbox.zbrbdl:9090/ignition?profile=authkeys
